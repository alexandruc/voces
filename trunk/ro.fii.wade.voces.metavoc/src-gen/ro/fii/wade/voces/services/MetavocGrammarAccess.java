/*
* generated by Xtext
*/

package ro.fii.wade.voces.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MetavocGrammarAccess implements IGrammarAccess {
	
	
	public class XMLModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMLModel");
		private final Assignment cContentsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContentsXMLValidElementParserRuleCall_0 = (RuleCall)cContentsAssignment.eContents().get(0);
		
		//XMLModel:
		//  contents+=XMLValidElement*;
		public ParserRule getRule() { return rule; }

		//contents+=XMLValidElement*
		public Assignment getContentsAssignment() { return cContentsAssignment; }

		//XMLValidElement
		public RuleCall getContentsXMLValidElementParserRuleCall_0() { return cContentsXMLValidElementParserRuleCall_0; }
	}

	public class XMLValidElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMLValidElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartelementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartelementXMLStartElementParserRuleCall_0_0 = (RuleCall)cStartelementAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cChildrenAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cChildrenXMLValidElementParserRuleCall_1_0_0 = (RuleCall)cChildrenAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cContentAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cContentINTTerminalRuleCall_1_2_0 = (RuleCall)cContentAssignment_1_2.eContents().get(0);
		private final Assignment cEndelementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndelementXMLEndElementParserRuleCall_2_0 = (RuleCall)cEndelementAssignment_2.eContents().get(0);
		
		//XMLValidElement:
		//  startelement=XMLStartElement (children+=XMLValidElement*|name=ID|content=INT)
		//  endelement=XMLEndElement;
		public ParserRule getRule() { return rule; }

		//startelement=XMLStartElement (children+=XMLValidElement*|name=ID|content=INT)
		//endelement=XMLEndElement
		public Group getGroup() { return cGroup; }

		//startelement=XMLStartElement
		public Assignment getStartelementAssignment_0() { return cStartelementAssignment_0; }

		//XMLStartElement
		public RuleCall getStartelementXMLStartElementParserRuleCall_0_0() { return cStartelementXMLStartElementParserRuleCall_0_0; }

		//children+=XMLValidElement*|name=ID|content=INT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//children+=XMLValidElement*
		public Assignment getChildrenAssignment_1_0() { return cChildrenAssignment_1_0; }

		//XMLValidElement
		public RuleCall getChildrenXMLValidElementParserRuleCall_1_0_0() { return cChildrenXMLValidElementParserRuleCall_1_0_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//content=INT
		public Assignment getContentAssignment_1_2() { return cContentAssignment_1_2; }

		//INT
		public RuleCall getContentINTTerminalRuleCall_1_2_0() { return cContentINTTerminalRuleCall_1_2_0; }

		//endelement=XMLEndElement
		public Assignment getEndelementAssignment_2() { return cEndelementAssignment_2; }

		//XMLEndElement
		public RuleCall getEndelementXMLEndElementParserRuleCall_2_0() { return cEndelementXMLEndElementParserRuleCall_2_0; }
	}

	public class XMLStartElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMLStartElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cXMLElementTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XMLStartElement:
		//  "<" XMLElementText ">";
		public ParserRule getRule() { return rule; }

		//"<" XMLElementText ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//XMLElementText
		public RuleCall getXMLElementTextParserRuleCall_1() { return cXMLElementTextParserRuleCall_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}

	public class XMLEndElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMLEndElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cXMLElementTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XMLEndElement:
		//  "</" XMLElementText ">";
		public ParserRule getRule() { return rule; }

		//"</" XMLElementText ">"
		public Group getGroup() { return cGroup; }

		//"</"
		public Keyword getLessThanSignSolidusKeyword_0() { return cLessThanSignSolidusKeyword_0; }

		//XMLElementText
		public RuleCall getXMLElementTextParserRuleCall_1() { return cXMLElementTextParserRuleCall_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}

	public class XMLElementTextElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMLElementText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamespaceVocNSParserRuleCall_0_0 = (RuleCall)cNamespaceAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNselementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNselementsNSElementParserRuleCall_2_0 = (RuleCall)cNselementsAssignment_2.eContents().get(0);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesXMLElementAttributesParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		
		//XMLElementText:
		//  namespace=VocNS ":" nselements=NSElement attributes=XMLElementAttributes*;
		public ParserRule getRule() { return rule; }

		//namespace=VocNS ":" nselements=NSElement attributes=XMLElementAttributes*
		public Group getGroup() { return cGroup; }

		//namespace=VocNS
		public Assignment getNamespaceAssignment_0() { return cNamespaceAssignment_0; }

		//VocNS
		public RuleCall getNamespaceVocNSParserRuleCall_0_0() { return cNamespaceVocNSParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//nselements=NSElement
		public Assignment getNselementsAssignment_2() { return cNselementsAssignment_2; }

		//NSElement
		public RuleCall getNselementsNSElementParserRuleCall_2_0() { return cNselementsNSElementParserRuleCall_2_0; }

		//attributes=XMLElementAttributes*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }

		//XMLElementAttributes
		public RuleCall getAttributesXMLElementAttributesParserRuleCall_3_0() { return cAttributesXMLElementAttributesParserRuleCall_3_0; }
	}

	public class XMLElementAttributesElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMLElementAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamespaceAttrNSParserRuleCall_0_0 = (RuleCall)cNamespaceAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNselementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNselementsNSElementParserRuleCall_2_0 = (RuleCall)cNselementsAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cElementValueQuotationMarkKeyword_4_0 = (Keyword)cElementValueAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XMLElementAttributes:
		//  namespace=AttrNS ":" nselements=NSElement "=" elementValue="\"" name=ID "\"";
		public ParserRule getRule() { return rule; }

		//namespace=AttrNS ":" nselements=NSElement "=" elementValue="\"" name=ID "\""
		public Group getGroup() { return cGroup; }

		//namespace=AttrNS
		public Assignment getNamespaceAssignment_0() { return cNamespaceAssignment_0; }

		//AttrNS
		public RuleCall getNamespaceAttrNSParserRuleCall_0_0() { return cNamespaceAttrNSParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//nselements=NSElement
		public Assignment getNselementsAssignment_2() { return cNselementsAssignment_2; }

		//NSElement
		public RuleCall getNselementsNSElementParserRuleCall_2_0() { return cNselementsNSElementParserRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//elementValue="\""
		public Assignment getElementValueAssignment_4() { return cElementValueAssignment_4; }

		//"\""
		public Keyword getElementValueQuotationMarkKeyword_4_0() { return cElementValueQuotationMarkKeyword_4_0; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_6() { return cQuotationMarkKeyword_6; }
	}

	public class AttrNSElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttrNS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AttrNS:
		//  name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class VocNSElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VocNS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VocNS:
		//  name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class NSElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NSElement");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//NSElement:
		//  name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private XMLModelElements pXMLModel;
	private XMLValidElementElements pXMLValidElement;
	private XMLStartElementElements pXMLStartElement;
	private XMLEndElementElements pXMLEndElement;
	private XMLElementTextElements pXMLElementText;
	private XMLElementAttributesElements pXMLElementAttributes;
	private AttrNSElements pAttrNS;
	private VocNSElements pVocNS;
	private NSElementElements pNSElement;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MetavocGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//XMLModel:
	//  contents+=XMLValidElement*;
	public XMLModelElements getXMLModelAccess() {
		return (pXMLModel != null) ? pXMLModel : (pXMLModel = new XMLModelElements());
	}
	
	public ParserRule getXMLModelRule() {
		return getXMLModelAccess().getRule();
	}

	//XMLValidElement:
	//  startelement=XMLStartElement (children+=XMLValidElement*|name=ID|content=INT)
	//  endelement=XMLEndElement;
	public XMLValidElementElements getXMLValidElementAccess() {
		return (pXMLValidElement != null) ? pXMLValidElement : (pXMLValidElement = new XMLValidElementElements());
	}
	
	public ParserRule getXMLValidElementRule() {
		return getXMLValidElementAccess().getRule();
	}

	//XMLStartElement:
	//  "<" XMLElementText ">";
	public XMLStartElementElements getXMLStartElementAccess() {
		return (pXMLStartElement != null) ? pXMLStartElement : (pXMLStartElement = new XMLStartElementElements());
	}
	
	public ParserRule getXMLStartElementRule() {
		return getXMLStartElementAccess().getRule();
	}

	//XMLEndElement:
	//  "</" XMLElementText ">";
	public XMLEndElementElements getXMLEndElementAccess() {
		return (pXMLEndElement != null) ? pXMLEndElement : (pXMLEndElement = new XMLEndElementElements());
	}
	
	public ParserRule getXMLEndElementRule() {
		return getXMLEndElementAccess().getRule();
	}

	//XMLElementText:
	//  namespace=VocNS ":" nselements=NSElement attributes=XMLElementAttributes*;
	public XMLElementTextElements getXMLElementTextAccess() {
		return (pXMLElementText != null) ? pXMLElementText : (pXMLElementText = new XMLElementTextElements());
	}
	
	public ParserRule getXMLElementTextRule() {
		return getXMLElementTextAccess().getRule();
	}

	//XMLElementAttributes:
	//  namespace=AttrNS ":" nselements=NSElement "=" elementValue="\"" name=ID "\"";
	public XMLElementAttributesElements getXMLElementAttributesAccess() {
		return (pXMLElementAttributes != null) ? pXMLElementAttributes : (pXMLElementAttributes = new XMLElementAttributesElements());
	}
	
	public ParserRule getXMLElementAttributesRule() {
		return getXMLElementAttributesAccess().getRule();
	}

	//AttrNS:
	//  name=ID;
	public AttrNSElements getAttrNSAccess() {
		return (pAttrNS != null) ? pAttrNS : (pAttrNS = new AttrNSElements());
	}
	
	public ParserRule getAttrNSRule() {
		return getAttrNSAccess().getRule();
	}

	//VocNS:
	//  name=ID;
	public VocNSElements getVocNSAccess() {
		return (pVocNS != null) ? pVocNS : (pVocNS = new VocNSElements());
	}
	
	public ParserRule getVocNSRule() {
		return getVocNSAccess().getRule();
	}

	//NSElement:
	//  name=ID;
	public NSElementElements getNSElementAccess() {
		return (pNSElement != null) ? pNSElement : (pNSElement = new NSElementElements());
	}
	
	public ParserRule getNSElementRule() {
		return getNSElementAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

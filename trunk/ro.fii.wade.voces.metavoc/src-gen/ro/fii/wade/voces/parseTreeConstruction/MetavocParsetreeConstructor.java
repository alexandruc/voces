/*
* generated by Xtext
*/
package ro.fii.wade.voces.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import ro.fii.wade.voces.services.MetavocGrammarAccess;

import com.google.inject.Inject;

public class MetavocParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private MetavocGrammarAccess grammarAccess;
		
	public MetavocGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLModel_ContentsAssignment(this, this, 0, inst);
			case 1: return new XMLValidElement_Group(this, this, 1, inst);
			case 2: return new XMLStartElement_Group(this, this, 2, inst);
			case 3: return new XMLEndElement_Group(this, this, 3, inst);
			case 4: return new XMLElementText_Group(this, this, 4, inst);
			case 5: return new XMLElementAttributes_Group(this, this, 5, inst);
			case 6: return new AttrNS_NameAssignment(this, this, 6, inst);
			case 7: return new VocNS_NameAssignment(this, this, 7, inst);
			case 8: return new NSElement_NameAssignment(this, this, 8, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule XMLModel ****************
 *
 * XMLModel:
 *   contents+=XMLValidElement*;
 *
 **/

// contents+=XMLValidElement*
protected class XMLModel_ContentsAssignment extends AssignmentToken  {
	
	public XMLModel_ContentsAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXMLModelAccess().getContentsAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLValidElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getXMLModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contents",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contents");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXMLValidElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getXMLModelAccess().getContentsXMLValidElementParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new XMLModel_ContentsAssignment(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule XMLModel ****************/


/************ begin Rule XMLValidElement ****************
 *
 * XMLValidElement:
 *   startelement=XMLStartElement (children+=XMLValidElement*|name=ID|content=INT)
 *   endelement=XMLEndElement;
 *
 **/

// startelement=XMLStartElement (children+=XMLValidElement*|name=ID|content=INT)
// endelement=XMLEndElement
protected class XMLValidElement_Group extends GroupToken {
	
	public XMLValidElement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getXMLValidElementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLValidElement_EndelementAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getXMLValidElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// startelement=XMLStartElement
protected class XMLValidElement_StartelementAssignment_0 extends AssignmentToken  {
	
	public XMLValidElement_StartelementAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXMLValidElementAccess().getStartelementAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLStartElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("startelement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("startelement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXMLStartElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getXMLValidElementAccess().getStartelementXMLStartElementParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// children+=XMLValidElement*|name=ID|content=INT
protected class XMLValidElement_Alternatives_1 extends AlternativesToken {

	public XMLValidElement_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getXMLValidElementAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLValidElement_ChildrenAssignment_1_0(parent, this, 0, inst);
			case 1: return new XMLValidElement_NameAssignment_1_1(parent, this, 1, inst);
			case 2: return new XMLValidElement_ContentAssignment_1_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// children+=XMLValidElement*
protected class XMLValidElement_ChildrenAssignment_1_0 extends AssignmentToken  {
	
	public XMLValidElement_ChildrenAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXMLValidElementAccess().getChildrenAssignment_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLValidElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("children",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("children");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXMLValidElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getXMLValidElementAccess().getChildrenXMLValidElementParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new XMLValidElement_ChildrenAssignment_1_0(parent, next, actIndex, consumed);
			case 1: return new XMLValidElement_StartelementAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=ID
protected class XMLValidElement_NameAssignment_1_1 extends AssignmentToken  {
	
	public XMLValidElement_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXMLValidElementAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLValidElement_StartelementAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getXMLValidElementAccess().getNameIDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// content=INT
protected class XMLValidElement_ContentAssignment_1_2 extends AssignmentToken  {
	
	public XMLValidElement_ContentAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXMLValidElementAccess().getContentAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLValidElement_StartelementAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("content",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("content");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getXMLValidElementAccess().getContentINTTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}


// endelement=XMLEndElement
protected class XMLValidElement_EndelementAssignment_2 extends AssignmentToken  {
	
	public XMLValidElement_EndelementAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXMLValidElementAccess().getEndelementAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLEndElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("endelement",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("endelement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXMLEndElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getXMLValidElementAccess().getEndelementXMLEndElementParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new XMLValidElement_Alternatives_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule XMLValidElement ****************/


/************ begin Rule XMLStartElement ****************
 *
 * XMLStartElement:
 *   "<" XMLElementText ">";
 *
 **/

// "<" XMLElementText ">"
protected class XMLStartElement_Group extends GroupToken {
	
	public XMLStartElement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getXMLStartElementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLStartElement_GreaterThanSignKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getXMLStartElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "<"
protected class XMLStartElement_LessThanSignKeyword_0 extends KeywordToken  {
	
	public XMLStartElement_LessThanSignKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getXMLStartElementAccess().getLessThanSignKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// XMLElementText
protected class XMLStartElement_XMLElementTextParserRuleCall_1 extends RuleCallToken {
	
	public XMLStartElement_XMLElementTextParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getXMLStartElementAccess().getXMLElementTextParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLElementText_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(XMLElementText_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getXMLElementTextRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLStartElement_LessThanSignKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ">"
protected class XMLStartElement_GreaterThanSignKeyword_2 extends KeywordToken  {
	
	public XMLStartElement_GreaterThanSignKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getXMLStartElementAccess().getGreaterThanSignKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLStartElement_XMLElementTextParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule XMLStartElement ****************/


/************ begin Rule XMLEndElement ****************
 *
 * XMLEndElement:
 *   "</" XMLElementText ">";
 *
 **/

// "</" XMLElementText ">"
protected class XMLEndElement_Group extends GroupToken {
	
	public XMLEndElement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getXMLEndElementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLEndElement_GreaterThanSignKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getXMLEndElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "</"
protected class XMLEndElement_LessThanSignSolidusKeyword_0 extends KeywordToken  {
	
	public XMLEndElement_LessThanSignSolidusKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getXMLEndElementAccess().getLessThanSignSolidusKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// XMLElementText
protected class XMLEndElement_XMLElementTextParserRuleCall_1 extends RuleCallToken {
	
	public XMLEndElement_XMLElementTextParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getXMLEndElementAccess().getXMLElementTextParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLElementText_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(XMLElementText_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getXMLElementTextRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLEndElement_LessThanSignSolidusKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ">"
protected class XMLEndElement_GreaterThanSignKeyword_2 extends KeywordToken  {
	
	public XMLEndElement_GreaterThanSignKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getXMLEndElementAccess().getGreaterThanSignKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLEndElement_XMLElementTextParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule XMLEndElement ****************/


/************ begin Rule XMLElementText ****************
 *
 * XMLElementText:
 *   namespace=VocNS ":" nselements=NSElement attributes=XMLElementAttributes*;
 *
 **/

// namespace=VocNS ":" nselements=NSElement attributes=XMLElementAttributes*
protected class XMLElementText_Group extends GroupToken {
	
	public XMLElementText_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getXMLElementTextAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLElementText_AttributesAssignment_3(parent, this, 0, inst);
			case 1: return new XMLElementText_NselementsAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getXMLElementTextRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// namespace=VocNS
protected class XMLElementText_NamespaceAssignment_0 extends AssignmentToken  {
	
	public XMLElementText_NamespaceAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXMLElementTextAccess().getNamespaceAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VocNS_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("namespace",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("namespace");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVocNSRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getXMLElementTextAccess().getNamespaceVocNSParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ":"
protected class XMLElementText_ColonKeyword_1 extends KeywordToken  {
	
	public XMLElementText_ColonKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getXMLElementTextAccess().getColonKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLElementText_NamespaceAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// nselements=NSElement
protected class XMLElementText_NselementsAssignment_2 extends AssignmentToken  {
	
	public XMLElementText_NselementsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXMLElementTextAccess().getNselementsAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NSElement_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("nselements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("nselements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNSElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getXMLElementTextAccess().getNselementsNSElementParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new XMLElementText_ColonKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// attributes=XMLElementAttributes*
protected class XMLElementText_AttributesAssignment_3 extends AssignmentToken  {
	
	public XMLElementText_AttributesAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXMLElementTextAccess().getAttributesAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLElementAttributes_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("attributes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("attributes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXMLElementAttributesRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getXMLElementTextAccess().getAttributesXMLElementAttributesParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new XMLElementText_AttributesAssignment_3(parent, next, actIndex, consumed);
			case 1: return new XMLElementText_NselementsAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule XMLElementText ****************/


/************ begin Rule XMLElementAttributes ****************
 *
 * XMLElementAttributes:
 *   namespace=AttrNS ":" nselements=NSElement "=" elementValue="\"" name=ID "\"";
 *
 **/

// namespace=AttrNS ":" nselements=NSElement "=" elementValue="\"" name=ID "\""
protected class XMLElementAttributes_Group extends GroupToken {
	
	public XMLElementAttributes_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getXMLElementAttributesAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLElementAttributes_QuotationMarkKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getXMLElementAttributesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// namespace=AttrNS
protected class XMLElementAttributes_NamespaceAssignment_0 extends AssignmentToken  {
	
	public XMLElementAttributes_NamespaceAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXMLElementAttributesAccess().getNamespaceAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttrNS_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("namespace",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("namespace");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttrNSRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getXMLElementAttributesAccess().getNamespaceAttrNSParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ":"
protected class XMLElementAttributes_ColonKeyword_1 extends KeywordToken  {
	
	public XMLElementAttributes_ColonKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getXMLElementAttributesAccess().getColonKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLElementAttributes_NamespaceAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// nselements=NSElement
protected class XMLElementAttributes_NselementsAssignment_2 extends AssignmentToken  {
	
	public XMLElementAttributes_NselementsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXMLElementAttributesAccess().getNselementsAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NSElement_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("nselements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("nselements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNSElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getXMLElementAttributesAccess().getNselementsNSElementParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new XMLElementAttributes_ColonKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "="
protected class XMLElementAttributes_EqualsSignKeyword_3 extends KeywordToken  {
	
	public XMLElementAttributes_EqualsSignKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getXMLElementAttributesAccess().getEqualsSignKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLElementAttributes_NselementsAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elementValue="\""
protected class XMLElementAttributes_ElementValueAssignment_4 extends AssignmentToken  {
	
	public XMLElementAttributes_ElementValueAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXMLElementAttributesAccess().getElementValueAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLElementAttributes_EqualsSignKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elementValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elementValue");
		if("\"".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getXMLElementAttributesAccess().getElementValueQuotationMarkKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class XMLElementAttributes_NameAssignment_5 extends AssignmentToken  {
	
	public XMLElementAttributes_NameAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXMLElementAttributesAccess().getNameAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLElementAttributes_ElementValueAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getXMLElementAttributesAccess().getNameIDTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// "\""
protected class XMLElementAttributes_QuotationMarkKeyword_6 extends KeywordToken  {
	
	public XMLElementAttributes_QuotationMarkKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getXMLElementAttributesAccess().getQuotationMarkKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XMLElementAttributes_NameAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule XMLElementAttributes ****************/


/************ begin Rule AttrNS ****************
 *
 * AttrNS:
 *   name=ID;
 *
 **/

// name=ID
protected class AttrNS_NameAssignment extends AssignmentToken  {
	
	public AttrNS_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrNSAccess().getNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAttrNSRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttrNSAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule AttrNS ****************/


/************ begin Rule VocNS ****************
 *
 * VocNS:
 *   name=ID;
 *
 **/

// name=ID
protected class VocNS_NameAssignment extends AssignmentToken  {
	
	public VocNS_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVocNSAccess().getNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVocNSRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVocNSAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule VocNS ****************/


/************ begin Rule NSElement ****************
 *
 * NSElement:
 *   name=ID;
 *
 **/

// name=ID
protected class NSElement_NameAssignment extends AssignmentToken  {
	
	public NSElement_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNSElementAccess().getNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNSElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getNSElementAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule NSElement ****************/

}

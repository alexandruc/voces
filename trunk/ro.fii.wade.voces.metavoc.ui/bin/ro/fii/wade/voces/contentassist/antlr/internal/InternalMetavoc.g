/*
* generated by Xtext
*/
grammar InternalMetavoc;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package ro.fii.wade.voces.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ro.fii.wade.voces.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import ro.fii.wade.voces.services.MetavocGrammarAccess;

}

@parser::members {
 
 	private MetavocGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MetavocGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleXMLModel
entryRuleXMLModel :
{ before(grammarAccess.getXMLModelRule()); }
	 ruleXMLModel
{ after(grammarAccess.getXMLModelRule()); } 
	 EOF 
;

// Rule XMLModel
ruleXMLModel 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getXMLModelAccess().getContentsAssignment()); }
(rule__XMLModel__ContentsAssignment)*
{ after(grammarAccess.getXMLModelAccess().getContentsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXMLValidElement
entryRuleXMLValidElement :
{ before(grammarAccess.getXMLValidElementRule()); }
	 ruleXMLValidElement
{ after(grammarAccess.getXMLValidElementRule()); } 
	 EOF 
;

// Rule XMLValidElement
ruleXMLValidElement 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getXMLValidElementAccess().getGroup()); }
(rule__XMLValidElement__Group__0)
{ after(grammarAccess.getXMLValidElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXMLStartElement
entryRuleXMLStartElement :
{ before(grammarAccess.getXMLStartElementRule()); }
	 ruleXMLStartElement
{ after(grammarAccess.getXMLStartElementRule()); } 
	 EOF 
;

// Rule XMLStartElement
ruleXMLStartElement 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getXMLStartElementAccess().getGroup()); }
(rule__XMLStartElement__Group__0)
{ after(grammarAccess.getXMLStartElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXMLEndElement
entryRuleXMLEndElement :
{ before(grammarAccess.getXMLEndElementRule()); }
	 ruleXMLEndElement
{ after(grammarAccess.getXMLEndElementRule()); } 
	 EOF 
;

// Rule XMLEndElement
ruleXMLEndElement 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getXMLEndElementAccess().getGroup()); }
(rule__XMLEndElement__Group__0)
{ after(grammarAccess.getXMLEndElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXMLElementText
entryRuleXMLElementText :
{ before(grammarAccess.getXMLElementTextRule()); }
	 ruleXMLElementText
{ after(grammarAccess.getXMLElementTextRule()); } 
	 EOF 
;

// Rule XMLElementText
ruleXMLElementText 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getXMLElementTextAccess().getGroup()); }
(rule__XMLElementText__Group__0)
{ after(grammarAccess.getXMLElementTextAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXMLElementAttributes
entryRuleXMLElementAttributes :
{ before(grammarAccess.getXMLElementAttributesRule()); }
	 ruleXMLElementAttributes
{ after(grammarAccess.getXMLElementAttributesRule()); } 
	 EOF 
;

// Rule XMLElementAttributes
ruleXMLElementAttributes 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getXMLElementAttributesAccess().getGroup()); }
(rule__XMLElementAttributes__Group__0)
{ after(grammarAccess.getXMLElementAttributesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttrNS
entryRuleAttrNS :
{ before(grammarAccess.getAttrNSRule()); }
	 ruleAttrNS
{ after(grammarAccess.getAttrNSRule()); } 
	 EOF 
;

// Rule AttrNS
ruleAttrNS 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getAttrNSAccess().getNameAssignment()); }
(rule__AttrNS__NameAssignment)
{ after(grammarAccess.getAttrNSAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVocNS
entryRuleVocNS :
{ before(grammarAccess.getVocNSRule()); }
	 ruleVocNS
{ after(grammarAccess.getVocNSRule()); } 
	 EOF 
;

// Rule VocNS
ruleVocNS 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getVocNSAccess().getNameAssignment()); }
(rule__VocNS__NameAssignment)
{ after(grammarAccess.getVocNSAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNSElement
entryRuleNSElement :
{ before(grammarAccess.getNSElementRule()); }
	 ruleNSElement
{ after(grammarAccess.getNSElementRule()); } 
	 EOF 
;

// Rule NSElement
ruleNSElement 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getNSElementAccess().getNameAssignment()); }
(rule__NSElement__NameAssignment)
{ after(grammarAccess.getNSElementAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__XMLValidElement__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLValidElementAccess().getChildrenAssignment_1_0()); }
(rule__XMLValidElement__ChildrenAssignment_1_0)*
{ after(grammarAccess.getXMLValidElementAccess().getChildrenAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getXMLValidElementAccess().getNameAssignment_1_1()); }
(rule__XMLValidElement__NameAssignment_1_1)
{ after(grammarAccess.getXMLValidElementAccess().getNameAssignment_1_1()); }
)

    |(
{ before(grammarAccess.getXMLValidElementAccess().getContentAssignment_1_2()); }
(rule__XMLValidElement__ContentAssignment_1_2)
{ after(grammarAccess.getXMLValidElementAccess().getContentAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__XMLValidElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLValidElementAccess().getStartelementAssignment_0()); }
(rule__XMLValidElement__StartelementAssignment_0)
{ after(grammarAccess.getXMLValidElementAccess().getStartelementAssignment_0()); }
)

	rule__XMLValidElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__XMLValidElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLValidElementAccess().getAlternatives_1()); }
(rule__XMLValidElement__Alternatives_1)
{ after(grammarAccess.getXMLValidElementAccess().getAlternatives_1()); }
)

	rule__XMLValidElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__XMLValidElement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLValidElementAccess().getEndelementAssignment_2()); }
(rule__XMLValidElement__EndelementAssignment_2)
{ after(grammarAccess.getXMLValidElementAccess().getEndelementAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__XMLStartElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLStartElementAccess().getLessThanSignKeyword_0()); }

	'<' 

{ after(grammarAccess.getXMLStartElementAccess().getLessThanSignKeyword_0()); }
)

	rule__XMLStartElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__XMLStartElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLStartElementAccess().getXMLElementTextParserRuleCall_1()); }
	ruleXMLElementText
{ after(grammarAccess.getXMLStartElementAccess().getXMLElementTextParserRuleCall_1()); }
)

	rule__XMLStartElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__XMLStartElement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLStartElementAccess().getGreaterThanSignKeyword_2()); }

	'>' 

{ after(grammarAccess.getXMLStartElementAccess().getGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__XMLEndElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLEndElementAccess().getLessThanSignSolidusKeyword_0()); }

	'</' 

{ after(grammarAccess.getXMLEndElementAccess().getLessThanSignSolidusKeyword_0()); }
)

	rule__XMLEndElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__XMLEndElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLEndElementAccess().getXMLElementTextParserRuleCall_1()); }
	ruleXMLElementText
{ after(grammarAccess.getXMLEndElementAccess().getXMLElementTextParserRuleCall_1()); }
)

	rule__XMLEndElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__XMLEndElement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLEndElementAccess().getGreaterThanSignKeyword_2()); }

	'>' 

{ after(grammarAccess.getXMLEndElementAccess().getGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__XMLElementText__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLElementTextAccess().getNamespaceAssignment_0()); }
(rule__XMLElementText__NamespaceAssignment_0)
{ after(grammarAccess.getXMLElementTextAccess().getNamespaceAssignment_0()); }
)

	rule__XMLElementText__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__XMLElementText__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLElementTextAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getXMLElementTextAccess().getColonKeyword_1()); }
)

	rule__XMLElementText__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__XMLElementText__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLElementTextAccess().getNselementsAssignment_2()); }
(rule__XMLElementText__NselementsAssignment_2)
{ after(grammarAccess.getXMLElementTextAccess().getNselementsAssignment_2()); }
)

	rule__XMLElementText__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__XMLElementText__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLElementTextAccess().getAttributesAssignment_3()); }
(rule__XMLElementText__AttributesAssignment_3)*
{ after(grammarAccess.getXMLElementTextAccess().getAttributesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__XMLElementAttributes__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLElementAttributesAccess().getNamespaceAssignment_0()); }
(rule__XMLElementAttributes__NamespaceAssignment_0)
{ after(grammarAccess.getXMLElementAttributesAccess().getNamespaceAssignment_0()); }
)

	rule__XMLElementAttributes__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__XMLElementAttributes__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLElementAttributesAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getXMLElementAttributesAccess().getColonKeyword_1()); }
)

	rule__XMLElementAttributes__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__XMLElementAttributes__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLElementAttributesAccess().getNselementsAssignment_2()); }
(rule__XMLElementAttributes__NselementsAssignment_2)
{ after(grammarAccess.getXMLElementAttributesAccess().getNselementsAssignment_2()); }
)

	rule__XMLElementAttributes__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__XMLElementAttributes__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLElementAttributesAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getXMLElementAttributesAccess().getEqualsSignKeyword_3()); }
)

	rule__XMLElementAttributes__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__XMLElementAttributes__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLElementAttributesAccess().getElementValueAssignment_4()); }
(rule__XMLElementAttributes__ElementValueAssignment_4)
{ after(grammarAccess.getXMLElementAttributesAccess().getElementValueAssignment_4()); }
)

	rule__XMLElementAttributes__Group__5
;
finally {
	restoreStackSize(stackSize);
}


rule__XMLElementAttributes__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLElementAttributesAccess().getNameAssignment_5()); }
(rule__XMLElementAttributes__NameAssignment_5)
{ after(grammarAccess.getXMLElementAttributesAccess().getNameAssignment_5()); }
)

	rule__XMLElementAttributes__Group__6
;
finally {
	restoreStackSize(stackSize);
}


rule__XMLElementAttributes__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLElementAttributesAccess().getQuotationMarkKeyword_6()); }

	'"' 

{ after(grammarAccess.getXMLElementAttributesAccess().getQuotationMarkKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__XMLModel__ContentsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLModelAccess().getContentsXMLValidElementParserRuleCall_0()); }
	ruleXMLValidElement{ after(grammarAccess.getXMLModelAccess().getContentsXMLValidElementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XMLValidElement__StartelementAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLValidElementAccess().getStartelementXMLStartElementParserRuleCall_0_0()); }
	ruleXMLStartElement{ after(grammarAccess.getXMLValidElementAccess().getStartelementXMLStartElementParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XMLValidElement__ChildrenAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLValidElementAccess().getChildrenXMLValidElementParserRuleCall_1_0_0()); }
	ruleXMLValidElement{ after(grammarAccess.getXMLValidElementAccess().getChildrenXMLValidElementParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XMLValidElement__NameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLValidElementAccess().getNameIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getXMLValidElementAccess().getNameIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XMLValidElement__ContentAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLValidElementAccess().getContentINTTerminalRuleCall_1_2_0()); }
	RULE_INT{ after(grammarAccess.getXMLValidElementAccess().getContentINTTerminalRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XMLValidElement__EndelementAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLValidElementAccess().getEndelementXMLEndElementParserRuleCall_2_0()); }
	ruleXMLEndElement{ after(grammarAccess.getXMLValidElementAccess().getEndelementXMLEndElementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XMLElementText__NamespaceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLElementTextAccess().getNamespaceVocNSParserRuleCall_0_0()); }
	ruleVocNS{ after(grammarAccess.getXMLElementTextAccess().getNamespaceVocNSParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XMLElementText__NselementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLElementTextAccess().getNselementsNSElementParserRuleCall_2_0()); }
	ruleNSElement{ after(grammarAccess.getXMLElementTextAccess().getNselementsNSElementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XMLElementText__AttributesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLElementTextAccess().getAttributesXMLElementAttributesParserRuleCall_3_0()); }
	ruleXMLElementAttributes{ after(grammarAccess.getXMLElementTextAccess().getAttributesXMLElementAttributesParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XMLElementAttributes__NamespaceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLElementAttributesAccess().getNamespaceAttrNSParserRuleCall_0_0()); }
	ruleAttrNS{ after(grammarAccess.getXMLElementAttributesAccess().getNamespaceAttrNSParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XMLElementAttributes__NselementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLElementAttributesAccess().getNselementsNSElementParserRuleCall_2_0()); }
	ruleNSElement{ after(grammarAccess.getXMLElementAttributesAccess().getNselementsNSElementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XMLElementAttributes__ElementValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLElementAttributesAccess().getElementValueQuotationMarkKeyword_4_0()); }
(
{ before(grammarAccess.getXMLElementAttributesAccess().getElementValueQuotationMarkKeyword_4_0()); }

	'"' 

{ after(grammarAccess.getXMLElementAttributesAccess().getElementValueQuotationMarkKeyword_4_0()); }
)

{ after(grammarAccess.getXMLElementAttributesAccess().getElementValueQuotationMarkKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XMLElementAttributes__NameAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXMLElementAttributesAccess().getNameIDTerminalRuleCall_5_0()); }
	RULE_ID{ after(grammarAccess.getXMLElementAttributesAccess().getNameIDTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttrNS__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrNSAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getAttrNSAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VocNS__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVocNSAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getVocNSAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NSElement__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNSElementAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getNSElementAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


